<%- include('header') -%>

  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-Y2MSZN4Y6Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() { dataLayer.push(arguments); }
      gtag('js', new Date());

      gtag('config', 'G-Y2MSZN4Y6Z');
    </script>
    <!-- CSS only -->
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"> -->

    <link rel="stylesheet" href="/css/timeshare.css" type="text/css">
    <link rel="stylesheet" href="/css/snackbar.css" type="text/css">

    <title> Join /<%= title %>'s shared timer</title>
    <meta name="description"
      content="Create a sharable timer for your team or friends! So far, <%= '🍅'.repeat(workCounter) %> have been completed! Join Now!">

    <meta name=" image"
      content="https://raw.githubusercontent.com/nmpereira/time-share/main/app/server/public/images/wall-clock.png">
    <meta property="og:title" content="Join /<%= title %>'s shared timer" />
    <meta property="og:description"
      content="Create a sharable timer for your team or friends! <% if(workCounter>0) {%> So far, <%= '🍅' .repeat(workCounter) %> have been completed! Join Now!<%}%>" />
    <meta property="og:image"
      content="https://raw.githubusercontent.com/nmpereira/time-share/main/app/server/public/images/wall-clock.png" />

    <!-- <title>Time-Share</title> -->
  </head>

  <body>

    <div class="backgroundPage">
      <div class="progressPage">

        <%- include('modal') -%>
          <div class="container">

            <div class="center">
              <h2 id="pomos" class="d-flex justify-content-center"></h2>
              <h2 id="pomo_breaks" class="d-flex justify-content-center"></h2>
              <div id="modalContainer" class="d-flex justify-content-center">


                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                  <span id="usernameSpan"></span> &thinsp;
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-pencil" viewBox="0 0 16 16">
                    <path
                      d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                  </svg>
                </button>





              </div>
              <h2 id="breakText" class="d-flex justify-content-center"></h2>
              <h1 id="timestamp" class="d-flex justify-content-center"></h1>

              <div class="d-flex justify-content-center timebuttons">
                <!-- <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer "
                onclick="addmin(0.1,'work')">0.1
                minute</button>
              <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer "
                onclick="addmin(0.25,'work')">0.25
                minute</button>
              <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer " onclick="addmin(1,'work')">1
                minute</button> -->
                <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer "
                  onclick="addmin(5,'work')">5
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer"
                  onclick="addmin(10,'work')">10
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace btnPadding updateTimer"
                  onclick="addmin(15,'work')">15
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace btnPadding  updateTimer"
                  onclick="addmin(20,'work')">20
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace  btnPadding updateTimer"
                  onclick="addmin(25,'work')">25
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace  btnPadding updateTimer"
                  onclick="addmin(30,'work')">30
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace  btnPadding updateTimer"
                  onclick="addmin(50,'work')">50
                  minutes</button>
                <button id="min_25" class="btn btn-success btnSpace  btnPadding updateTimer"
                  onclick="addmin(60,'work')">60
                  minutes</button>
              </div>

              <div class="d-flex justify-content-center timebuttons">
                <!-- <button id="min_5" class="btn btn-info btnSpace btnPadding  updateTimer" onclick="addmin(0.1,'break')">0.1
                minutes</button>
              <button id="min_5" class="btn btn-info btnSpace btnPadding  updateTimer"
                onclick="addmin(0.25,'break')">0.25
                minutes</button> -->
                <button id="min_5" class="btn btn-info btnSpace btnPadding  updateTimer" onclick="addmin(1,'break')">1
                  minute</button>
                <button id="min_5" class="btn btn-info btnSpace btnPadding  updateTimer" onclick="addmin(2,'break')">2
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(5,'break')">5
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(10,'break')">10
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(15,'break')">15
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(20,'break')">20
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(25,'break')">25
                  minutes</button>
                <button id="min_5" class="btn btn-info btnSpace  btnPadding updateTimer" onclick="addmin(60,'break')">60
                  minutes</button>
              </div>
              <div class="d-flex justify-content-center">

                <button id="pauseTimer" class="btn btn-primary btnSpace timerControl"
                  onclick="pauseTimer()">Pause</button>
                <button id="playTimer" class="btn btn-danger btnSpace timerControl"
                  onclick="playTimer()">Resume</button>
                <!-- <button id="resetTimer" class="btn btn-secondary btnSpace" onclick="resetTimer()">Reset</button> -->
                <button id="changeTimer" class="btn btn-secondary btnSpace" onclick="changeTimer()">Change
                  Timer</button>
                <button id="shareTimer" class="btn btn-success btnSpace" onclick="shareTimer()">Share Timer
                  (Clipboard)</button>

              </div>
            </div>
          </div>
          <div id="updateMainContainer">

            <div class="wrapper">
              <div class="message-wrapper">
                <div class="message">Message
                </div>


              </div>
            </div>
          </div>
          <!-- <button id="resetTimer" onclick="resetTimer()">Reset</button> -->
      </div>
    </div>
    <!-- <div id="userCountGlobalContainer">Users Online: &thinsp;<span id="userCountGlobal"> 0</span></div> -->
    <!-- <div id="userCountGlobalContainer">Connected to this timer: &thinsp;<span id="userCountLocal"> 0</span></div> -->
    <div id="snackbar">Copied Link to Clipboard</div>
    <!-- <script src="/socket.io/socket.io.js"></script> -->

    <script>
      // const socket = io();
    </script>

    <script>
      isTimerPage = true

      let isUpdateTimer = true
      document.getElementById('pauseTimer').style.display = "none"
      document.getElementById('playTimer').style.display = "none"
      // Listen for messages from server

      // const timeout = setTimeout(() => { window.location.reload() }, 10000)
      socket.on("message", (msg) => {
        console.log("Message from server ", msg);
      });
      socket.on("timerActivity", (msg) => {
        // console.log("timerActivity", msg);
      });
      // Listen for timestamps from server
      var audio = new Audio('./assets/Chime.wav');


      const addEmojis = (msg) => {
        document.querySelector('#pomos').innerHTML = '🍅'.repeat(msg.workCounter);
        document.querySelector('#pomo_breaks').innerHTML = '🍪'.repeat(msg.breakCounter);
      }


      socket.on('pomocount', (msg) => {

        addEmojis(msg)
        console.log("Pomo count updated", msg)
      })
      socket.on("timestamp", (msg) => {
        // clearTimeout(timeout);
        // console.log("TimeStamp:", msg)
        // addEmojis(msg)
        if (msg.isUpdateTimer == true) {
          toggleTimerVisibility(msg.isUpdateTimer)

        } else {


          document.getElementById("timestamp").innerHTML = msg.timestamp;
          if (msg.timestamp != 0 && msg.timestamp != "..." && hmsToSeconds(msg.timestamp) <= 1) {
            audio.play();

          }

          document.querySelector('.progressPage').style.height = `${msg.completedPercentage}%`;
          document.title = msg.timestamp
          toggleTimerVisibility(msg.isUpdateTimer)
          if (msg.action == 'run') { pausedVisibility(true) }
          if (msg.action == 'paused') { pausedVisibility(false) }
          pausedVisibility(msg.action)
          expiredVisibility(msg.expired)
          breakVisibility(msg.isBreak)
        }
      });


      const timerVisibility = (bool) => {
        if (bool == true) {
          return
          // document.getElementById('timestamp').innerHTML = "none"
          // document.getElementById('breakText').style.display = "inline"
          // console.log(action)
        } else if (bool == false) {
          document.getElementById('timestamp').innerHTML = ""
          document.getElementById('breakText').innerHTML = ""
        }
      }
      const pausedVisibility = (action) => {


        if (action == true) {
          document.getElementById('playTimer').style.display = "none"
          document.getElementById('pauseTimer').style.display = "inline"
          // console.log(action)
        } else if (action == false) {
          document.getElementById('pauseTimer').style.display = "none"
          document.getElementById('playTimer').style.display = "inline"
        }
      }
      const expiredVisibility = (expired) => {


        if (expired === true) {
          document.title = '00:00';
          document.getElementById("timestamp").innerHTML = '00:00:00'
          document.getElementById('pauseTimer').style.display = "none"
          document.getElementById('playTimer').style.display = "none"
        }
      };


      const breakVisibility = (isBreak) => {
        if (isBreak === true) {
          document.querySelector(".backgroundPage").style.backgroundColor = "#2484d6";
          document.querySelector(".progressPage").style.backgroundColor = "#56A0DF";
          document.getElementById("breakText").innerHTML = "Break time!"
        } else if (isBreak === false) {
          document.querySelector(".backgroundPage").style.backgroundColor = "#4e50bf";
          document.querySelector(".progressPage").style.backgroundColor = `#6c6dbd`;
          document.getElementById("breakText").innerHTML = "Work time!"
        }

      }
      var hmsToSeconds = (secs) => {
        // console.log(secs)
        if (secs == 0) return 0

        // your input string
        var a = secs.split(':'); // split it at the colons
        var result = 0
        if (a.length == 3) {
          result = ((+a[0]) * 60 * 60) + ((+a[1]) * 60) + (+a[2])
        }
        if (a.length == 2) {
          result = ((+a[0]) * 60) + (+a[1])
        }
        // console.log(result)
        return result

      }
      var secondsToHMS = (secs) => {
        var sec_num = parseInt(secs, 10);
        var hours = Math.floor(sec_num / 3600);
        var minutes = Math.floor(sec_num / 60) % 60;
        var seconds = sec_num % 60;
        if (secs > 0) {
          return [hours, minutes, seconds]
            .map((v) => (v < 10 ? "0" + v : v))
            .filter((v, i) => v !== "00" || i > 0)
            .join(":");
        } else return 0;
      };

      socket.on("userActivity", (msg) => {
        // console.log("User Activity", msg);

        // document.getElementById('userCountGlobal').innerHTML = " " + msg.clientsConnected_Global
      });
      socket.on("localUserActivity", (msg) => {
        // addEmojis(msg)

        document.getElementById('userCountLocal').innerHTML = " " + msg.clientsConnected_Socket
        // console.log("localUserActivity ", msg);
      })
      socket.on("changetimer", (msg) => {
        if (msg.isUpdateTimer == undefined) { msg.isUpdateTimer = true }
        // console.log("changetimer ", msg);

        toggleTimerVisibility(msg.isUpdateTimer)
        pausedVisibility(true)

        // changeTimer()
      })


      if (isUpdateTimer == undefined) { isUpdateTimer = true }

      // parse url to get id and put in var
      const userId = document.location.pathname.split("/").pop()
      const requestOrigin = window.location.host
      const pauseTimer = () => {
        socket.emit("pausetimer", { userId, requestOrigin });
        // console.log("this is paused")
      };
      const addmin = (min, status) => {
        socket.emit("addmin", { min, userId, requestOrigin, status });
        playTimer()
        toggleTimerVisibility(true)
        changeTimer()

        document.getElementById("timestamp").innerHTML = secondsToHMS(min * 60)
      };

      const changeTimer = () => {
        socket.emit("changetimer");
      }
      const toggleTimerVisibility = (bool) => {

        // console.log("toggleTimerVisibility", bool)
        let updateTimerElements = document.querySelectorAll('.updateTimer')
        let timerControl = document.querySelectorAll('.timerControl')
        if (bool == true) {
          // update timer view
          timerControl.forEach((x) => x.style.display = 'none')
          document.getElementById("changeTimer").innerHTML = 'Back'
          updateTimerElements.forEach((x) => x.style.display = 'inline')
          pausedVisibility()
          document.getElementById("timestamp").innerHTML = '';
          document.getElementById("breakText").innerHTML = '';
          document.querySelector(".backgroundPage").style.backgroundColor = "#808080";
          document.querySelector(".progressPage").style.backgroundColor = "#808080";



        } else {
          // timer view
          document.getElementById("changeTimer").innerHTML = 'Change timer'
          updateTimerElements.forEach((x) => x.style.display = 'none')
          timerControl.forEach((x) => x.style.display = 'inline')
          document.getElementById("changeTimer").style.display = 'inline'
          document.getElementById("timestamp").style.display = 'inline'
          document.getElementById("breakText").style.display = 'inline'
        }
      }

      toggleTimerVisibility(true)


      const playTimer = () => {
        socket.emit("playtimer", { userId, requestOrigin });
      };
      const resetTimer = () => {
        const id = window.location.pathname
        const host = window.location.origin
        // console.log(host, id)
        socket.emit("resettimer", { userId, requestOrigin });
        window.location.href = `${host}/reset${id}`;
      };


    </script>

    <script>
      const shareTimer = () => {
        const ShareUrl = window.location.href
        navigator.clipboard.writeText(ShareUrl)
        console.log("Copied to Clipboard", ShareUrl)
        // Get the snackbar DIV
        var x = document.getElementById("snackbar");
        // Add the "show" class to DIV
        x.className = "show";
        // After 3 seconds, remove the show class from DIV
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);
      };
    </script>

    <script>

      const VultureUsername = localStorage.getItem('VultureUser');
      console.log('User Joined:', VultureUsername)
      socket.emit("userJoined", { userId, requestOrigin, VultureUsername })
      // if (VultureUsername != null) {

      document.querySelector("#usernameSpan").innerHTML = VultureUsername ? `Hey ${VultureUsername}!` : ` Hey User!`;
      // }
      const saveUsername = (event) => {
        event.preventDefault();
        let oldUsername = localStorage.getItem('VultureUser');
        let usernameInput = document.querySelector("#recipientname").value;
        document.querySelector("#usernameSpan").innerHTML = `Hey ${usernameInput}!`;

        localStorage.setItem('VultureUser', usernameInput);
        console.log(`User ${oldUsername} changed thier name to ${usernameInput}`)
        socket.emit("usernameChange", { userId, requestOrigin, usernameInput })
      }
      socket.on('userJoined', (msg) => {


        console.log("User popped in", msg)
      })





    </script>

  </body>

  </html>
  <%- include('footer') -%>